{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/dom.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-container/ngx-material-timepicker-container.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/tokens/time-locale.token.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker-time.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-parser.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/ngx-timepicker-field.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-localizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-hour.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-minute.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-content/ngx-material-timepicker-content.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/append-to-input.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","TimeUnit","TimePeriod","TimeFormat","NgxMaterialTimepickerEventService","backdropClickSubject","Subject","keydownEventSubject","asObservable","pipe","shareReplay","bufferSize","refCount","dispatchEvent","event","type","next","Error","Injectable","providedIn","DomService","cfr","appRef","injector","document","appendTimepickerToBody","timepicker","config","_this","componentRef","resolveComponentFactory","keys","forEach","instance","attachView","hostView","domElement","rootNodes","body","appendChild","destroyTimepicker","destroy","detachView","tslib_1.__param","Optional","Inject","DOCUMENT","ComponentFactoryResolver","ApplicationRef","Injector","isSameOrAfter","time","compareWith","unit","hour","hasSame","valueOf","isSameOrBefore","isDigit","e","some","keyCode","ctrlKey","metaKey","TimeAdapter","parseTime","opts","_a","getLocaleOptionsByTime","numberingSystem","locale","timeMask","split","TWELVE_SHORT","TWENTY_FOUR_SHORT","DateTime","fromFormat","formatTime","format","setLocale","DEFAULT_LOCALE","toLocaleString","TIME_SIMPLE","hour12","DEFAULT_NUMBERING_SYSTEM","toLocaleTimeString","DEFAULT_FORMAT","_b","timeFormat","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","minutes","minute","isAfter","isBefore","between","before","after","isBetween","formatHour","currentHour","period","AM","PM","fromDateTimeToString","TWENTY_FOUR","TWELVE","reconfigure","toFormat","luxon","local","resolvedLocaleOpts","localeConfig","defaultConfig","isNaN","parseInt","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","setDefaultTimeIfAvailable","setDefaultTime","console","error","getFullTime","getValue","trim","defaultTime","toJSDate","fromJSDate","isValid","substr","toUpperCase","getHours","formatHourByPeriod","getMinutes","resetTime","AnimationState","TIME_LOCALE","InjectionToken","NgxMaterialTimepickerContainerComponent","timepickerService","eventService","timeUnit","activeTimeUnit","HOUR","unsubscribe","onKeydown","stopPropagation","ngOnInit","animationState","disableAnimation","ENTER","defineTime","selectedHour","selectedMinute","selectedPeriod","timepickerBaseRef","timeUpdated","takeUntil","subscribe","bind","onHourChange","onTimeChange","onHourSelected","hoursOnly","changeTimeUnit","MINUTE","hourSelected","onMinuteChange","changePeriod","setTime","timeSet","close","LEAVE","animationDone","phaseName","toState","ngOnDestroy","complete","minTime","maxTime","timeChanged","emit","tslib_1.__decorate","Input","HostListener","Component","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","String","NgxMaterialTimepickerComponent","domService","isEsc","EventEmitter","opened","closed","theme","warn","_ngxMaterialTimepickerTheme","timepickerInput","_format","value","_minutesGap","gap","Math","floor","disabled","element","registerInput","input","open","cancelBtnTmpl","confirmBtnTmpl","editableHintTmpl","enableKeyboardInput","preventOverlayClick","appendToInput","timepickerClass","inputElement","subscribeToEvents","unsubscribeFromEvents","updateTime","merge","backdropClick","keydownEvent","filter","TemplateRef","Output","NgxMaterialTimepickerToggleIconDirective","Directive","NgxMaterialTimepickerToggleComponent","_disabled","undefined","ContentChild","static","VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TimepickerDirective","multi","elementRef","_value","timepickerSubscriptions","onTouched","onChange","previousFormat","_timepicker","_min","_max","picker","registerTimepicker","updateInputValue","nativeElement","updateValue","ngOnChanges","changes","currentValue","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","push","host","[disabled]","(change)","(blur)","ElementRef","NgxMaterialTimepickerThemeDirective","ngAfterViewInit","setTheme","val","prop","setProperty","replace","toLowerCase","fill","map","v","disableHours","hours","currentTime","fromObject","disableMinutes","hour_1","NgxMaterialTimepickerHoursFace","hourChange","hoursList","onTimeSelected","NgxMaterialTimepicker24HoursFaceComponent","_super","tslib_1.__extends","ngAfterContentInit","changeDetection","ChangeDetectionStrategy","OnPush","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","x0","y0","x","y","currentAngle","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","isInnerClockFace","step","round","roundAngle","onMouseup","removeTouchEvents","touchStartHandler","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","isClockFaceDisabled","every","availableTime","sqrt","pow","ViewChild","NgxMaterialTimepickerButtonComponent","NgxMaterialTimepickerDialComponent","meridiems","Info","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","showHint","isHintVisible","hideHint","TimeParserPipe","timeMeasure","parsedTime","Pipe","name","NgxMaterialTimepickerDialControlComponent","timeParserPipe","focused","unfocused","timeList","saveTimeAndChangeTimeUnit","previousTime","onKeyDown","char","fromCharCode","nextTime","test","isTimeUnavailable","isTimeDisabledToChange","changeTimeByArrow","onModelChange","toString","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","TimeFormatterPipe","OverlayDirective","preventClick","MinutesFormatterPipe","AutofocusDirective","activeElement","isFocusActive","focus","preventScroll","NgxTimepickerFieldComponent","minHour","maxHour","buttonAlign","unsubscribe$","timepickerTime","_defaultTime","isDefaultTime","period$","hour$","minute$","h","changeTime","m","onTimeSet","emitLocalTimeChange","localTime","NgxTimepickerFieldComponent_1","NgxTimepickerTimeControlComponent","timeParser","timeChanges","isFirstChange","isDefaultTimeSet","concatTime","changeTimeIfValid","increase","decrease","onFocus","isFocused","onBlur","timeString","NgxTimepickerPeriodSelectorComponent","periodSelected","periods","localizedPeriod","indexOf","isOpened","select","TimeLocalizerPipe","isKeyboardEnabled","ActiveHourPipe","ActiveMinutePipe","currentMinute","NgxMaterialTimepickerContentComponent","AppendToInputDirective","renderer","offsetHeight","_inputCords","bottom","isElementFit","window","innerHeight","inputCords","_direction","direction","append","changePosition","defineElementYByDirection","setStyle","inputTop","inputBottom","Renderer2","NgxMaterialTimepickerModule","ngModule","NgxMaterialTimepickerModule_1","useValue","NgModule","imports","CommonModule","FormsModule","exports","declarations","ɵ0","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TimeUnit {\n    HOUR,\n    MINUTE\n}\n","export enum TimePeriod {\n    AM = 'AM',\n    PM = 'PM'\n}\n","export enum TimeFormat {\n    TWELVE = 'hh:mm a',\n    TWELVE_SHORT = 'h:m a',\n    TWENTY_FOUR = 'HH:mm',\n    TWENTY_FOUR_SHORT = 'H:m'\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerEventService {\n\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this.backdropClickSubject.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this.keydownEventSubject.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case 'click':\n                this.backdropClickSubject.next(<MouseEvent>event);\n                break;\n            case 'keydown':\n                this.keydownEventSubject.next(<KeyboardEvent>event);\n                break;\n            default:\n                throw new Error('no such event type');\n        }\n    }\n\n}\n","import {\n    ApplicationRef,\n    ComponentFactoryResolver,\n    ComponentRef,\n    EmbeddedViewRef,\n    Inject,\n    Injectable,\n    Injector,\n    Optional,\n    Type\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from '../components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport { TimepickerConfig } from '../models/timepicker-config.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DomService {\n\n    private componentRef: ComponentRef<NgxMaterialTimepickerContainerComponent>;\n\n    constructor(private cfr: ComponentFactoryResolver,\n                private appRef: ApplicationRef,\n                private injector: Injector,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n    }\n\n    appendTimepickerToBody(timepicker: Type<NgxMaterialTimepickerContainerComponent>, config: TimepickerConfig): void {\n        this.componentRef = this.cfr.resolveComponentFactory(timepicker).create(this.injector);\n\n        Object.keys(config).forEach(key => this.componentRef.instance[key] = config[key]);\n\n        this.appRef.attachView(this.componentRef.hostView);\n\n        const domElement: HTMLElement = (this.componentRef.hostView as EmbeddedViewRef<NgxMaterialTimepickerContainerComponent>)\n            .rootNodes[0];\n\n        this.document.body.appendChild(domElement);\n    }\n\n    destroyTimepicker(): void {\n        this.componentRef.destroy();\n        this.appRef.detachView(this.componentRef.hostView);\n    }\n}\n","/* tslint:disable */\nimport { DateTime } from 'luxon';\n\n\nexport function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour >= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n    }\n}\n\nexport function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour <= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n    }\n}\n\nexport function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\n    }\n    if (unit === 'minutes') {\n        return isSameOrBefore(time, after) && isSameOrAfter(time, before);\n    }\n}\n\nexport function isDigit(e: KeyboardEvent) {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n        // Allow: Ctrl/cmd+A\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+C\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+X\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: home, end, left, right, up, down\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n        return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n}\n","import { DateTime, DateTimeFormatOptions, LocaleOptions, NumberingSystem } from 'luxon';\n\nimport { TimeFormat } from '../models/time-format.enum';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils';\nimport { TimeOptions } from '../models/time-options.interface';\n\n// @dynamic\nexport class TimeAdapter {\n    static DEFAULT_FORMAT = 12;\n    static DEFAULT_LOCALE = 'en-US';\n    static DEFAULT_NUMBERING_SYSTEM: NumberingSystem = 'latn';\n\n    static parseTime(time: string, opts: TimeOptions): DateTime {\n        const {numberingSystem, locale} = TimeAdapter.getLocaleOptionsByTime(time, opts);\n        const isPeriodExist = time.split(' ').length === 2;\n        const timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\n\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\n    }\n\n    static formatTime(time: string, opts: TimeOptions): string {\n        const {format} = opts;\n\n        return TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE)\n            .toLocaleString({\n                ...DateTime.TIME_SIMPLE,\n                hour12: format !== 24,\n                numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM\n            });\n    }\n\n    static toLocaleTimeString(time: string, opts: TimeOptions = {}): string {\n        const {format = TimeAdapter.DEFAULT_FORMAT, locale = TimeAdapter.DEFAULT_LOCALE} = opts;\n        const timeFormat: DateTimeFormatOptions = {...DateTime.TIME_SIMPLE, hour12: format !== 24};\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\n\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\n    }\n\n    static isTimeAvailable(\n        time: string,\n        min?: DateTime,\n        max?: DateTime,\n        granularity?: 'hours' | 'minutes',\n        minutesGap?: number,\n        format?: number\n    ): boolean {\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.parseTime(time, {format});\n        const minutes = convertedTime.minute;\n\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && isSameOrBefore(convertedTime, max, granularity);\n        const between = (min && max)\n            && isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || between || isAvailable;\n    }\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n        if (period === TimePeriod.AM && hour === 12) {\n            return 0;\n        } else if (period === TimePeriod.PM && hour === 24) {\n            return 12;\n        }\n        return hour;\n    }\n\n    static fromDateTimeToString(time: DateTime, format: number): string {\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n\n        return time.reconfigure({\n            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n            locale: TimeAdapter.DEFAULT_LOCALE\n        }).toFormat(timeFormat);\n    }\n\n    private static getLocaleOptionsByTime(time: string, opts: LocaleOptions): LocaleOptions {\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\n        const localeConfig: LocaleOptions = {numberingSystem: numberingSystem as NumberingSystem, locale};\n        const defaultConfig: LocaleOptions = {numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE};\n\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { TimeAdapter } from './time-adapter';\nimport { DateTime } from 'luxon';\n\n\nconst DEFAULT_HOUR: ClockFaceTime = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: ClockFaceTime = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerService {\n\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\n\n\n    set hour(hour: ClockFaceTime) {\n        this.hourSubject.next(hour);\n    }\n\n    get selectedHour(): Observable<ClockFaceTime> {\n        return this.hourSubject.asObservable();\n    }\n\n    set minute(minute: ClockFaceTime) {\n        this.minuteSubject.next(minute);\n    }\n\n    get selectedMinute(): Observable<ClockFaceTime> {\n        return this.minuteSubject.asObservable();\n    }\n\n    set period(period: TimePeriod) {\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\n\n        if (isPeriodValid) {\n            this.periodSubject.next(period);\n        }\n    }\n\n    get selectedPeriod(): Observable<TimePeriod> {\n        return this.periodSubject.asObservable();\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n                this.setDefaultTime(time, format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getFullTime(format: number): string {\n        const hour = this.hourSubject.getValue().time;\n        const minute = this.minuteSubject.getValue().time;\n        const period = format === 12 ? this.periodSubject.getValue() : '';\n        const time = `${hour}:${minute} ${period}`.trim();\n\n        return TimeAdapter.formatTime(time, {format});\n    }\n\n    private setDefaultTime(time: string, format: number) {\n        const defaultTime = TimeAdapter.parseTime(time, {format}).toJSDate();\n\n        if (DateTime.fromJSDate(defaultTime).isValid) {\n            const period = time.substr(time.length - 2).toUpperCase();\n            const hour = defaultTime.getHours();\n\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as TimePeriod)};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = period as TimePeriod;\n\n        } else {\n            this.resetTime();\n        }\n    }\n\n    private resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = TimePeriod.AM;\n    }\n}\n\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour: number, period: TimePeriod): number {\n    switch (period) {\n        case TimePeriod.AM:\n            return hour === 0 ? 12 : hour;\n        case TimePeriod.PM:\n            return hour === 12 ? 12 : hour - 12;\n        default:\n            return hour;\n    }\n}\n","import { Component, HostListener, Inject, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { DateTime } from 'luxon';\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { shareReplay, takeUntil } from 'rxjs/operators';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TimepickerRef } from '../../models/timepicker-ref.interface';\nimport { TimepickerConfig } from '../../models/timepicker-config.interface';\nimport { NgxMaterialTimepickerEventService } from '../../services/ngx-material-timepicker-event.service';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\n\nexport enum AnimationState {\n    ENTER = 'enter',\n    LEAVE = 'leave'\n}\n\n@Component({\n    selector: 'ngx-material-timepicker-container',\n    templateUrl: './ngx-material-timepicker-container.component.html',\n    styleUrls: ['./ngx-material-timepicker-container.component.scss'],\n    animations: [\n        trigger('timepicker', [\n            transition(`* => ${AnimationState.ENTER}`, [\n                style({transform: 'translateY(-30%)'}),\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\n            ]),\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\n                style({transform: 'translateY(0)', opacity: 1}),\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\n            ])\n        ])\n    ],\n    providers: [NgxMaterialTimepickerService]\n})\nexport class NgxMaterialTimepickerContainerComponent implements OnInit, OnDestroy, TimepickerConfig {\n\n    selectedHour: Observable<ClockFaceTime>;\n    selectedMinute: Observable<ClockFaceTime>;\n    selectedPeriod: Observable<TimePeriod>;\n\n    timeUnit = TimeUnit;\n    activeTimeUnit = TimeUnit.HOUR;\n\n    animationState: AnimationState;\n\n    cancelBtnTmpl: TemplateRef<Node>;\n    editableHintTmpl: TemplateRef<Node>;\n    confirmBtnTmpl: TemplateRef<Node>;\n    inputElement: any;\n\n    enableKeyboardInput: boolean;\n    preventOverlayClick: boolean;\n    disableAnimation: boolean;\n    disabled: boolean;\n    appendToInput: boolean;\n    hoursOnly: boolean;\n\n    format: number;\n    minutesGap: number;\n\n    minTime: DateTime;\n    maxTime: DateTime;\n    time: string;\n\n    timepickerClass: string;\n    theme: NgxMaterialTimepickerTheme;\n    timepickerBaseRef: TimepickerRef;\n\n    @Input()\n    set defaultTime(time: string) {\n        this.setDefaultTime(time);\n    }\n\n    private unsubscribe = new Subject();\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                private eventService: NgxMaterialTimepickerEventService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(e: any): void {\n        this.eventService.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    ngOnInit(): void {\n\n        this.animationState = !this.disableAnimation && AnimationState.ENTER;\n\n        this.defineTime();\n\n        this.selectedHour = this.timepickerService.selectedHour\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedMinute = this.timepickerService.selectedMinute\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedPeriod = this.timepickerService.selectedPeriod\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.timepickerBaseRef.timeUpdated.pipe(takeUntil(this.unsubscribe))\n            .subscribe(this.setDefaultTime.bind(this));\n    }\n\n    onHourChange(hour: ClockFaceTime): void {\n        this.timepickerService.hour = hour;\n        this.onTimeChange();\n    }\n\n    onHourSelected(hour: number): void {\n        if (!this.hoursOnly) {\n            this.changeTimeUnit(TimeUnit.MINUTE);\n        }\n        this.timepickerBaseRef.hourSelected.next(hour);\n    }\n\n    onMinuteChange(minute: ClockFaceTime): void {\n        this.timepickerService.minute = minute;\n        this.onTimeChange();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.onTimeChange();\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.activeTimeUnit = unit;\n    }\n\n    setTime(): void {\n        this.timepickerBaseRef.timeSet.next(this.timepickerService.getFullTime(this.format));\n        this.close();\n    }\n\n    close(): void {\n        if (this.disableAnimation) {\n            this.timepickerBaseRef.close();\n            return;\n        }\n\n        this.animationState = AnimationState.LEAVE;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n            this.timepickerBaseRef.close();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n\n    private setDefaultTime(time: string): void {\n        this.timepickerService.setDefaultTimeIfAvailable(\n            time, this.minTime, this.maxTime, this.format, this.minutesGap);\n    }\n\n    private defineTime(): void {\n        const minTime = this.minTime;\n\n        if (minTime && !this.time) {\n            const time = TimeAdapter.fromDateTimeToString(minTime, this.format);\n\n            this.setDefaultTime(time);\n        }\n    }\n\n    private onTimeChange(): void {\n        const time = TimeAdapter.toLocaleTimeString(this.timepickerService.getFullTime(this.format), {\n            locale: this.locale,\n            format: this.format\n        });\n\n        this.timepickerBaseRef.timeChanged.emit(time);\n    }\n\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const TIME_LOCALE = new InjectionToken<string>('TimeLocale');\n","import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { merge, Subject } from 'rxjs';\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { DateTime } from 'luxon';\nimport { DomService } from './services/dom.service';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport { TimepickerRef } from './models/timepicker-ref.interface';\nimport { NgxMaterialTimepickerTheme } from './models/ngx-material-timepicker-theme.interface';\n\nconst ESCAPE = 27;\n\n@Component({\n    selector: 'ngx-material-timepicker',\n    template: '',\n})\nexport class NgxMaterialTimepickerComponent implements TimepickerRef {\n\n    timeUpdated = new Subject<string>();\n\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input('ESC') isEsc = true;\n    @Input() enableKeyboardInput: boolean;\n    @Input() preventOverlayClick: boolean;\n    @Input() disableAnimation: boolean;\n    @Input() appendToInput: boolean;\n    @Input() hoursOnly = false;\n    @Input() defaultTime: string;\n    @Input() timepickerClass: string;\n    @Input() theme: NgxMaterialTimepickerTheme;\n    /**\n     * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead\n     */\n    @Input()\n    set ngxMaterialTimepickerTheme(theme: NgxMaterialTimepickerTheme) {\n        console.warn(`'ngxMaterialTimepickerTheme' is deprecated. Use 'theme' instead`);\n        this._ngxMaterialTimepickerTheme = theme;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get format(): number {\n        return this.timepickerInput ? this.timepickerInput.format : this._format;\n    }\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Output() timeSet = new EventEmitter<string>();\n    @Output() opened = new EventEmitter<null>();\n    @Output() closed = new EventEmitter<null>();\n    @Output() hourSelected = new EventEmitter<number>();\n    @Output() timeChanged = new EventEmitter<string>();\n\n    private _minutesGap: number;\n    private _format: number;\n    private _ngxMaterialTimepickerTheme: NgxMaterialTimepickerTheme;\n    private timepickerInput: TimepickerDirective;\n    private unsubscribe = new Subject();\n\n    constructor(private eventService: NgxMaterialTimepickerEventService,\n                private domService: DomService) {\n    }\n\n    get minTime(): DateTime {\n        return this.timepickerInput && (this.timepickerInput.min as DateTime);\n    }\n\n    get maxTime(): DateTime {\n        return this.timepickerInput && (this.timepickerInput.max as DateTime);\n    }\n\n    get disabled(): boolean {\n        return this.timepickerInput && this.timepickerInput.disabled;\n    }\n\n    get time(): string {\n        return this.timepickerInput && this.timepickerInput.value;\n    }\n\n    get inputElement(): any {\n        return this.timepickerInput && this.timepickerInput.element;\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: TimepickerDirective): void {\n        if (this.timepickerInput) {\n            throw Error('A Timepicker can only be associated with a single input.');\n        }\n        this.timepickerInput = input;\n    }\n\n    open(): void {\n        this.domService.appendTimepickerToBody(NgxMaterialTimepickerContainerComponent, {\n            timepickerBaseRef: this,\n            time: this.time,\n            defaultTime: this.defaultTime,\n            maxTime: this.maxTime,\n            minTime: this.minTime,\n            format: this.format,\n            minutesGap: this.minutesGap,\n            disableAnimation: this.disableAnimation,\n            cancelBtnTmpl: this.cancelBtnTmpl,\n            confirmBtnTmpl: this.confirmBtnTmpl,\n            editableHintTmpl: this.editableHintTmpl,\n            disabled: this.disabled,\n            enableKeyboardInput: this.enableKeyboardInput,\n            preventOverlayClick: this.preventOverlayClick,\n            appendToInput: this.appendToInput,\n            hoursOnly: this.hoursOnly,\n            theme: this.theme || this._ngxMaterialTimepickerTheme,\n            timepickerClass: this.timepickerClass,\n            inputElement: this.inputElement\n        });\n        this.opened.next();\n        this.subscribeToEvents();\n    }\n\n    close(): void {\n        this.domService.destroyTimepicker();\n        this.closed.next();\n        this.unsubscribeFromEvents();\n    }\n\n    updateTime(time: string): void {\n        this.timeUpdated.next(time);\n    }\n\n    private subscribeToEvents(): void {\n        merge(this.eventService.backdropClick,\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\n            .pipe(takeUntil(this.unsubscribe))\n            .subscribe(() => this.close());\n    }\n\n    private unsubscribeFromEvents(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n}\n","import {Directive} from '@angular/core';\n\n/* To override a default toggle icon */\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\n\nexport class NgxMaterialTimepickerToggleIconDirective {\n}\n","import {Component, ContentChild, Input} from '@angular/core';\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\n\n@Component({\n    selector: 'ngx-material-timepicker-toggle',\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\n})\n\nexport class NgxMaterialTimepickerToggleComponent {\n\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    private _disabled: boolean;\n\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective, {static: true}) customIcon: NgxMaterialTimepickerToggleIconDirective;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { DateTime } from 'luxon';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\n\nconst VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line\n    useExisting: forwardRef(() => TimepickerDirective),\n    multi: true\n};\n\n@Directive({\n    selector: '[ngxTimepicker]',\n    providers: [VALUE_ACCESSOR],\n    host: {\n        '[disabled]': 'disabled',\n        '(change)': 'updateValue($event.target.value)',\n        '(blur)': 'onTouched()',\n    },\n})\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.value = this._value;\n            this._timepicker.updateTime(this._value);\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    private _format = 12;\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    private _min: string | DateTime;\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    private _max: string | DateTime;\n\n    @Input('ngxTimepicker')\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\n        this.registerTimepicker(picker);\n    }\n\n    private _timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = '';\n            this.updateInputValue();\n            return;\n        }\n        const time = TimeAdapter.formatTime(value, {locale: this.locale, format: this.format});\n        const isAvailable = TimeAdapter.isTimeAvailable(\n            time,\n            <DateTime>this._min,\n            <DateTime>this._max,\n            'minutes',\n            this._timepicker.minutesGap,\n            this._format\n        );\n\n        if (isAvailable) {\n            this._value = time;\n            this.updateInputValue();\n            return;\n        }\n        console.warn('Selected time doesn\\'t match min or max value');\n    }\n\n    get value(): string {\n        if (!this._value) {\n            return '';\n        }\n        return TimeAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this.locale});\n    }\n\n    private _value = '';\n\n    @Input() disabled: boolean;\n    @Input() disableClick: boolean;\n\n    private timepickerSubscriptions: Subscription[] = [];\n    private previousFormat: number;\n\n    onTouched = () => {\n    }\n\n    private onChange: (value: any) => void = () => {\n    }\n\n    constructor(private elementRef: ElementRef,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    get element(): any {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    private set defaultTime(time: string) {\n        this._timepicker.defaultTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\n    }\n\n    updateValue(value: string) {\n        this.value = value;\n        this.onChange(value);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.defaultTime = changes['value'].currentValue;\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        if (value) {\n            this.defaultTime = value;\n        }\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    ngOnDestroy() {\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n    }\n\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\n                this.value = time;\n                this.onChange(this.value);\n                this.onTouched();\n            }));\n            this.timepickerSubscriptions.push(\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\n        } else {\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\n        }\n    }\n\n    private updateInputValue(): void {\n        this.elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\n\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\n\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\n\n    private element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this.element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === 'string') {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { TimeFormat } from '../models/time-format.enum';\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\nimport { DateTime } from 'luxon';\n\n\nexport function getHours(format: number): ClockFaceTime[] {\n    return Array(format).fill(1).map((v, i) => {\n        const angleStep = 30;\n        const time = v + i;\n        const angle = angleStep * time;\n        return {time: time === 24 ? 0 : time, angle};\n    });\n}\n\nexport function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\n    if (config.min || config.max) {\n\n        return hours.map(value => {\n            const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\n            const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\n\n            return {\n                ...value,\n                disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n            };\n        });\n    }\n    return hours;\n}\n\nexport function getMinutes(gap = 1): ClockFaceTime[] {\n    const minutesCount = 60;\n    const angleStep = 360 / minutesCount;\n    const minutes = [];\n\n    for (let i = 0; i < minutesCount; i++) {\n        const angle = angleStep * i;\n        if (i % gap === 0) {\n            minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n        }\n    }\n    return minutes;\n}\n\nexport function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\n    if (config.min || config.max) {\n\n        const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n\n        return minutes.map(value => {\n            const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\n\n            return {\n                ...value,\n                disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n            };\n        });\n    }\n    return minutes;\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { DateTime } from 'luxon';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { getHours } from '../../utils/timepicker-time.utils';\n\n\nexport class NgxMaterialTimepickerHoursFace {\n\n    @Input() selectedHour: ClockFaceTime;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: ClockFaceTime[] = [];\n\n    protected constructor(format: number) {\n        this.hoursList = getHours(format);\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import { AfterContentInit, ChangeDetectionStrategy, Component } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { disableHours } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-24-hours-face',\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\n\n    constructor() {\n        super(24);\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { disableHours } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-12-hours-face',\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\n\n    @Input() period: TimePeriod;\n\n    constructor() {\n        super(12);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            this.hoursList = disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { DateTime } from 'luxon';\nimport { disableMinutes, getMinutes } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-minutes-face',\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\n})\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\n\n    minutesList: ClockFaceTime[] = [];\n    timeUnit = TimeUnit;\n\n    @Input() selectedMinute: ClockFaceTime;\n    @Input() selectedHour: number;\n    @Input() period: TimePeriod;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            const minutes = getMinutes(this.minutesGap);\n            this.minutesList = disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: '75px',\n        top: 'calc(50% - 75px)'\n    },\n    large: {\n        height: '103px',\n        top: 'calc(50% - 103px)'\n    }\n};\n\n@Component({\n    selector: 'ngx-material-timepicker-face',\n    templateUrl: './ngx-material-timepicker-face.component.html',\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    timeUnit = TimeUnit;\n\n    isClockFaceDisabled: boolean;\n    innerClockFaceSize = 85;\n\n    @Input() faceTime: ClockFaceTime[];\n    @Input() selectedTime: ClockFaceTime;\n    @Input() unit: TimeUnit;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\n    @Output() timeSelected = new EventEmitter<number>();\n\n    @ViewChild('clockFace', {static: true}) clockFace: ElementRef;\n    @ViewChild('clockHand', {static: true}) clockHand: ElementRef;\n\n    private isStarted: boolean;\n    private touchStartHandler: () => any;\n    private touchEndHandler: () => any;\n\n    ngAfterViewInit() {\n        this.setClockHandPosition();\n        this.addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes['faceTime'];\n        const selectedTimeChanges = changes['selectedTime'];\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this.setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this.selectAvailableTime());\n        }\n    }\n\n\n    trackByTime(_, time: ClockFaceTime): string | number {\n        return time.time;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMousedown(e: any) {\n        e.preventDefault();\n        this.isStarted = true;\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\n    @HostListener('touchend', ['$event.changedTouches[0]'])\n    @HostListener('mousemove', ['$event'])\n    selectTime(e: any): void {\n\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === TimeUnit.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\n        const roundedAngle = roundAngle(circleAngle, angleStep);\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this.isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n    @HostListener('mouseup', ['$event'])\n    onMouseup(e: any) {\n        e.preventDefault();\n        this.isStarted = false;\n    }\n\n    ngOnDestroy() {\n        this.removeTouchEvents();\n    }\n\n    private addTouchEvents(): void {\n        this.touchStartHandler = this.onMousedown.bind(this);\n        this.touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n\n    private removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n\n    private setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this.decreaseClockHand();\n            } else {\n                this.increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n\n    private selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n}\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    } else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    } else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    } else {// I quarter\n        return currentAngle;\n    }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-button',\n    templateUrl: './ngx-material-timepicker-button.component.html',\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\n})\nexport class NgxMaterialTimepickerButtonComponent {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    TemplateRef\n} from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { DateTime, Info } from 'luxon';\nimport { disableHours, disableMinutes, getHours, getMinutes } from '../../utils/timepicker-time.utils';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial',\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\n\n    timeUnit = TimeUnit;\n\n    hours: ClockFaceTime[];\n    minutes: ClockFaceTime[];\n    meridiems = Info.meridiems({locale: this.locale});\n\n    isHintVisible: boolean;\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() hour: number | string;\n    @Input() minute: number | string;\n    @Input() format: number;\n    @Input() period: TimePeriod;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue\n            || changes['format'] && changes['format'].currentValue) {\n            const hours = getHours(this.format);\n\n            this.hours = disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (changes['period'] && changes['period'].currentValue\n            || changes['hour'] && changes['hour'].currentValue) {\n            const minutes = getMinutes(this.minutesGap);\n\n            this.minutes = disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.periodChanged.next(period);\n    }\n\n    changeHour(hour: ClockFaceTime): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: ClockFaceTime): void {\n        this.minuteChanged.next(minute);\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n}\n","import { Inject, Injectable, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime, NumberingSystem } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeParser'\n})\n@Injectable()\nexport class TimeParserPipe implements PipeTransform {\n\n    private readonly numberingSystem: NumberingSystem;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem as NumberingSystem;\n    }\n\n    transform(time: string | number, timeUnit = TimeUnit.HOUR): number | string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        if (!isNaN(+time)) {\n            return time;\n        }\n\n        if (timeUnit === TimeUnit.MINUTE) {\n            return this.parseTime(time, 'm', 'minute');\n        }\n\n        return this.parseTime(time, 'H', 'hour');\n\n    }\n\n    private parseTime(time: string | number, format: string, timeMeasure: TimeMeasure): number {\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this.numberingSystem})[timeMeasure];\n\n        if (!isNaN(parsedTime)) {\n            return parsedTime;\n        }\n\n        throw new Error(`Cannot parse time - ${time}`);\n    }\n\n}\n","/* tslint:disable:triple-equals */\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { isDigit } from '../../utils/timepicker.utils';\nimport { TimeParserPipe } from '../../pipes/time-parser.pipe';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial-control',\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss'],\n    providers: [TimeParserPipe]\n})\nexport class NgxMaterialTimepickerDialControlComponent {\n\n    previousTime: number | string;\n\n    @Input() timeList: ClockFaceTime[];\n    @Input() timeUnit: TimeUnit;\n    @Input() time: string;\n    @Input() isActive: boolean;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\n    @Output() focused = new EventEmitter<null>();\n    @Output() unfocused = new EventEmitter<null>();\n\n    constructor(private timeParserPipe: TimeParserPipe) {\n    }\n\n    private get selectedTime(): ClockFaceTime {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        const time = this.selectedTime;\n        if (time) {\n            this.timeChanged.next(time);\n            this.previousTime = time.time;\n        }\n    }\n\n    onKeyDown(e: any): void {\n        const char = String.fromCharCode(e.keyCode);\n\n\n        if ((!isDigit(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n\n        if (isDigit(e)) {\n            this.changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = this.timeParserPipe.transform(value, this.timeUnit).toString();\n    }\n\n    private changeTimeByArrow(keyCode: number): void {\n        const ARROW_UP = 38;\n        const ARROW_DOWN = 40;\n        let time: string;\n\n        if (keyCode === ARROW_UP) {\n            time = String(+this.time + (this.minutesGap || 1));\n        } else if (keyCode === ARROW_DOWN) {\n            time = String(+this.time - (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\nimport { DateTime } from 'luxon';\nimport { disableHours, disableMinutes } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-period',\n    templateUrl: 'ngx-material-timepicker-period.component.html',\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)'}),\n                animate('.2s', style({transform: 'scale(1)'})),\n                sequence([\n                    animate('3s', style({opacity: 1})),\n                    animate('.3s', style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMaterialTimepickerPeriodComponent {\n\n    timePeriod = TimePeriod;\n    isPeriodAvailable = true;\n\n    @Input() selectedPeriod: TimePeriod;\n    @Input() format: number;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() hours: ClockFaceTime[];\n    @Input() minutes: ClockFaceTime[];\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() selectedHour: number | string;\n    @Input() meridiems: string[];\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n\n    changePeriod(period: TimePeriod): void {\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\n        const time = this.getDisabledTimeByPeriod(period);\n        return !time.every(t => t.disabled);\n    }\n\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\n        switch (this.activeTimeUnit) {\n            case TimeUnit.HOUR:\n                return disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case TimeUnit.MINUTE:\n                return disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error('no such TimeUnit');\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\n@Pipe({\n    name: 'timeFormatter'\n})\nexport class TimeFormatterPipe implements PipeTransform {\n\n    transform(time: number | string, timeUnit: TimeUnit): any {\n        if (time == null || time === '') {\n            return time;\n        }\n        switch (timeUnit) {\n            case TimeUnit.HOUR:\n                return DateTime.fromObject({hour: +time}).toFormat('HH');\n            case TimeUnit.MINUTE:\n                return DateTime.fromObject({minute: +time}).toFormat('mm');\n            default:\n                throw new Error('no such time unit');\n        }\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\n\n@Directive({\n    selector: '[overlay]'\n})\nexport class OverlayDirective {\n\n    @Input('overlay') preventClick: boolean;\n\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\n    }\n\n\n    @HostListener('click', ['$event'])\n    onClick(e: any) {\n        if (!this.preventClick) {\n            this.eventService.dispatchEvent(e);\n        }\n        e.preventDefault();\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class MinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Directive({\n    selector: '[timepickerAutofocus]'\n})\nexport class AutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input('timepickerAutofocus') isFocusActive: boolean;\n\n    private activeElement: HTMLElement;\n\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this.activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this.element.nativeElement.focus({ preventScroll: true }));\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this.activeElement.focus({ preventScroll: true }));\n    }\n}\n","import { Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { getHours, getMinutes } from '../../utils/timepicker-time.utils';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\n\n@Component({\n    selector: 'ngx-timepicker-field',\n    templateUrl: './ngx-timepicker-field.component.html',\n    styleUrls: ['./ngx-timepicker-field.component.scss'],\n    providers: [\n        NgxMaterialTimepickerService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxTimepickerFieldComponent,\n            multi: true\n        }\n    ]\n})\nexport class NgxTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n    period$: Observable<TimePeriod>;\n    hour$: Observable<ClockFaceTime>;\n    minute$: Observable<ClockFaceTime>;\n\n    minHour = 1;\n    maxHour = 12;\n\n    timeUnit = TimeUnit;\n    timepickerTime: string;\n    isDefaultTime: boolean;\n\n    @Input() disabled: boolean;\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\n    @Input() buttonAlign: 'right' | 'left' = 'right';\n    @Input() clockTheme: NgxMaterialTimepickerTheme;\n    @Input() controlOnly: boolean;\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        this.minHour = this._format === 12 ? 1 : 0;\n        this.maxHour = this._format === 12 ? 12 : 23;\n        this.hoursList = getHours(this._format);\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.defaultTime = this.timepickerTime;\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n\n    @Input()\n    set defaultTime(val: string) {\n        const time = TimeAdapter.formatTime(val, {locale: this.locale, format: this._format});\n        this.timepickerService.setDefaultTimeIfAvailable(time, null, null, this._format);\n        this._defaultTime = time;\n        this.timepickerTime = time;\n        this.isDefaultTime = !!time;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    @Output() timeChanged = new EventEmitter<string>();\n\n    private _defaultTime: string;\n    private _format = 12;\n    private previousFormat: number;\n\n    private hoursList: ClockFaceTime[];\n    private minutesList: ClockFaceTime[];\n\n    private unsubscribe$ = new Subject();\n\n    private onChange: (value: string) => void = () => {\n    }\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnInit() {\n        this.period$ = this.timepickerService.selectedPeriod;\n        this.hour$ = this.timepickerService.selectedHour;\n        this.minute$ = this.timepickerService.selectedMinute;\n\n        this.hoursList = getHours(this._format);\n        this.minutesList = getMinutes();\n    }\n\n    writeValue(val: string): void {\n        if (val) {\n            this.defaultTime = val;\n        } else {\n            this.resetTime();\n        }\n    }\n\n    registerOnTouched(fn: any): void {\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    changeHour(hour: number): void {\n        this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\n        this.changeTime();\n    }\n\n    changeMinute(minute: number): void {\n        this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\n        this.changeTime();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.changeTime();\n    }\n\n    onTimeSet(time: string): void {\n        this.defaultTime = time;\n        this.emitLocalTimeChange(time);\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    private changeTime(): void {\n        const time = this.timepickerService.getFullTime(this._format);\n        this.timepickerTime = time;\n\n        this.emitLocalTimeChange(time);\n    }\n\n    private resetTime(): void {\n        this.timepickerService.hour = {angle: 0, time: null};\n        this.timepickerService.minute = {angle: 0, time: null};\n    }\n\n    private emitLocalTimeChange(time: string): void {\n        const localTime = TimeAdapter.toLocaleTimeString(time, {format: this.format, locale: this.locale});\n\n        this.onChange(localTime);\n        this.timeChanged.emit(localTime);\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { isDigit } from '../../../utils/timepicker.utils';\nimport { TimeUnit } from '../../../models/time-unit.enum';\nimport { TimeParserPipe } from '../../../pipes/time-parser.pipe';\n\n@Component({\n    selector: 'ngx-timepicker-time-control',\n    templateUrl: './ngx-timepicker-time-control.component.html',\n    styleUrls: ['./ngx-timepicker-time-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TimeParserPipe]\n})\n\nexport class NgxTimepickerTimeControlComponent implements OnChanges {\n\n    @Input() time: number;\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string;\n    @Input() timeUnit: TimeUnit;\n    @Input() disabled: boolean;\n    @Input() isDefaultTimeSet: boolean;\n\n    @Output() timeChanged = new EventEmitter<number>();\n\n    isFocused: boolean;\n\n    private previousTime: number;\n\n    constructor(private timeParser: TimeParserPipe) {\n    }\n\n\n    ngOnChanges(changes: SimpleChanges): void {\n        const timeChanges = changes['time'];\n        const isTimeNotProvided = timeChanges && timeChanges.isFirstChange() && !this.isDefaultTimeSet;\n\n        if (isTimeNotProvided) {\n            this.time = null;\n        }\n    }\n\n    onKeydown(event: any): void {\n        if (!isDigit(event)) {\n            event.preventDefault();\n        }\n        const char = String.fromCharCode(event.keyCode);\n        const time = concatTime(String(this.time), char);\n\n        this.changeTimeIfValid(time);\n\n        switch (event.key) {\n            case 'ArrowUp':\n                this.increase();\n                break;\n            case 'ArrowDown':\n                this.decrease();\n                break;\n        }\n    }\n\n    increase(): void {\n        if (!this.disabled) {\n            let nextTime = +this.time + 1;\n\n            if (nextTime > this.max) {\n                nextTime = this.min;\n            }\n\n            this.timeChanged.emit(nextTime);\n        }\n    }\n\n    decrease(): void {\n        if (!this.disabled) {\n            let previousTime = +this.time - 1;\n\n            if (previousTime < this.min) {\n                previousTime = this.max;\n            }\n\n            this.timeChanged.emit(previousTime);\n        }\n    }\n\n    onFocus(): void {\n        this.isFocused = true;\n        this.previousTime = this.time;\n    }\n\n    onBlur(): void {\n        this.isFocused = false;\n\n        if (this.previousTime !== this.time) {\n            this.changeTimeIfValid(+this.time);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = +this.timeParser.transform(value, this.timeUnit);\n    }\n\n    private changeTimeIfValid(value: number | undefined) {\n        if (!isNaN(value)) {\n            this.time = value;\n\n            if (this.time > this.max) {\n                const timeString = String(value);\n                this.time = +timeString[timeString.length - 1];\n            }\n\n            if (this.time < this.min) {\n                this.time = this.min;\n            }\n\n            this.timeChanged.emit(this.time);\n        }\n    }\n}\n\nfunction concatTime(currentTime: string, nextTime: string): number {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return +time;\n    }\n}\n\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../../models/time-period.enum';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { TIME_LOCALE } from '../../../tokens/time-locale.token';\nimport { Info } from 'luxon';\n\n@Component({\n    selector: 'ngx-timepicker-period-selector',\n    templateUrl: 'ngx-timepicker-period-selector.component.html',\n    styleUrls: ['./ngx-timepicker-period-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)', opacity: 0}),\n                animate(200, style({transform: 'scale(1)', opacity: 1}))\n            ]),\n            transition(':leave', [\n                animate(200, style({transform: 'scale(0)', opacity: 0}))\n            ])\n        ])\n    ]\n})\n\nexport class NgxTimepickerPeriodSelectorComponent {\n\n    @Input() isOpened: boolean;\n    @Input() disabled: boolean;\n    @Input()\n    set selectedPeriod(period: TimePeriod) {\n        if (period) {\n            const periods = [TimePeriod.AM, TimePeriod.PM];\n            this.localizedPeriod = this.meridiems[periods.indexOf(period)];\n        }\n    }\n\n    @Output() periodSelected = new EventEmitter<TimePeriod>();\n\n    period = TimePeriod;\n    meridiems = Info.meridiems({locale: this.locale});\n    localizedPeriod: string;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    open(): void {\n        if (!this.disabled) {\n            this.isOpened = true;\n        }\n    }\n\n    select(period: TimePeriod): void {\n        this.periodSelected.next(period);\n        this.isOpened = false;\n    }\n\n    backdropClick(): void {\n        this.isOpened = false;\n    }\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeLocalizer'\n})\nexport class TimeLocalizerPipe implements PipeTransform {\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    transform(time: number | string, timeUnit: TimeUnit, isKeyboardEnabled = false): string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        switch (timeUnit) {\n            case TimeUnit.HOUR: {\n                const format = (time === 0 || isKeyboardEnabled) ? 'HH' : 'H';\n                return this.formatTime('hour', time, format);\n            }\n            case TimeUnit.MINUTE:\n                return this.formatTime('minute', time, 'mm');\n            default:\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\n        }\n    }\n\n    private formatTime(timeMeasure: TimeMeasure, time: string | number, format: string): string {\n        try {\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this.locale).toFormat(format);\n        } catch {\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this.locale}`);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeHour'\n})\nexport class ActiveHourPipe implements PipeTransform {\n\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\n        if (hour == null || isClockFaceDisabled) {\n            return false;\n        }\n\n        return hour === currentHour;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeMinute'\n})\nexport class ActiveMinutePipe implements PipeTransform {\n\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\n        if (minute == null || isClockFaceDisabled) {\n            return false;\n        }\n        const defaultGap = 5;\n\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\n    }\n\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-content',\n    templateUrl: './ngx-material-timepicker-content.component.html',\n})\nexport class NgxMaterialTimepickerContentComponent {\n    @Input() appendToInput: boolean;\n    @Input() inputElement: any;\n}\n","import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';\n\ntype TimepickerDirection = 'top' | 'center' | 'bottom';\n\n@Directive({\n    selector: '[ngxAppendToInput]'\n})\nexport class AppendToInputDirective implements AfterViewInit {\n\n    @Input('ngxAppendToInput') inputElement: any;\n\n    private _direction: TimepickerDirection;\n    private _inputCords: ClientRect;\n    private readonly element: HTMLElement;\n\n    constructor(elementRef: ElementRef<HTMLElement>,\n                private renderer: Renderer2) {\n        this.element = elementRef.nativeElement;\n    }\n\n    private get inputCords(): ClientRect {\n        return this.inputElement.getBoundingClientRect();\n    }\n\n    private get direction(): TimepickerDirection {\n        const height = this.element.offsetHeight;\n        const {bottom, top} = this._inputCords;\n        const isElementFit = (window && window.innerHeight) - bottom < height;\n        const isTop = isElementFit && top > height;\n        const isCenter = isElementFit && top < height;\n\n        if (isTop) {\n            return 'top';\n        } else if (isCenter) {\n            return 'center';\n        }\n        return 'bottom';\n    }\n\n    ngAfterViewInit(): void {\n        this._inputCords = this.inputCords;\n        this._direction = this.direction;\n\n        this.append();\n    }\n\n    @HostListener('window:scroll')\n    changePosition(): void {\n        const {bottom, top} = this.inputCords;\n        const y = this.defineElementYByDirection(top, bottom);\n        this.setStyle('top', `${y}px`);\n    }\n\n    private append(): void {\n        const {left, bottom, top} = this._inputCords;\n        const y = this.defineElementYByDirection(top, bottom);\n\n        this.setStyle('position', 'fixed');\n        this.setStyle('left', `${left}px`);\n        this.setStyle('top', `${y}px`);\n    }\n\n    private setStyle(style: string, value: string): void {\n        this.renderer.setStyle(this.element, style, value);\n    }\n\n    private defineElementYByDirection(inputTop: number, inputBottom: number): number {\n        if (this._direction === 'top') {\n            return inputTop - this.element.offsetHeight;\n        } else if (this._direction === 'center') {\n            return inputTop - (this.element.offsetHeight / 2);\n        }\n        return inputBottom;\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\nimport {\n    NgxMaterialTimepicker24HoursFaceComponent\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\nimport {\n    NgxMaterialTimepicker12HoursFaceComponent\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\nimport {\n    NgxMaterialTimepickerMinutesFaceComponent } from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\nimport {\n    NgxMaterialTimepickerDialControlComponent } from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\nimport { OverlayDirective } from './directives/overlay.directive';\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\nimport { AutofocusDirective } from './directives/autofocus.directive';\nimport { NgxTimepickerFieldComponent } from './components/timepicker-field/ngx-timepicker-field.component';\nimport {\n    NgxTimepickerTimeControlComponent\n} from './components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component';\nimport {\n    NgxTimepickerPeriodSelectorComponent\n} from './components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component';\nimport { TimeLocalizerPipe } from './pipes/time-localizer.pipe';\nimport { TIME_LOCALE } from './tokens/time-locale.token';\nimport { TimeAdapter } from './services/time-adapter';\nimport { TimeParserPipe } from './pipes/time-parser.pipe';\nimport { ActiveHourPipe } from './pipes/active-hour.pipe';\nimport { ActiveMinutePipe } from './pipes/active-minute.pipe';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport {\n    NgxMaterialTimepickerContentComponent\n} from './components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\nimport { AppendToInputDirective } from './directives/append-to-input.directive';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxTimepickerFieldComponent,\n        TimepickerDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        NgxMaterialTimepickerThemeDirective,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent\n    ],\n    declarations: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxMaterialTimepickerButtonComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent,\n        NgxMaterialTimepickerPeriodComponent,\n        TimeFormatterPipe,\n        TimepickerDirective,\n        OverlayDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        AutofocusDirective,\n        MinutesFormatterPipe,\n        NgxMaterialTimepickerThemeDirective,\n        NgxTimepickerFieldComponent,\n        NgxTimepickerTimeControlComponent,\n        NgxTimepickerPeriodSelectorComponent,\n        TimeLocalizerPipe,\n        TimeParserPipe,\n        ActiveHourPipe,\n        ActiveMinutePipe,\n        NgxMaterialTimepickerContainerComponent,\n        NgxMaterialTimepickerContentComponent,\n        AppendToInputDirective\n    ],\n    providers: [\n        {provide: TIME_LOCALE, useValue: TimeAdapter.DEFAULT_LOCALE},\n    ],\n    entryComponents: [NgxMaterialTimepickerContainerComponent]\n})\nexport class NgxMaterialTimepickerModule {\n\n    static setLocale(locale: string): ModuleWithProviders {\n        return {\n            ngModule: NgxMaterialTimepickerModule,\n            providers: [\n                {provide: TIME_LOCALE, useValue: locale}\n            ]\n        };\n    }\n}\n"]}